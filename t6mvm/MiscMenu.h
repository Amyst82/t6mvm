#pragma once
#include <StdInclude.h>
#include "Misc.h"
#include "UIControls.h"
#include "CustomDvars.h"

namespace MiscMenu
{
	static string GetCFG()
	{
		std::string cfg =
			"//MISC\n" + 
			std::string("cg_drawGun ") + std::to_string(T6SDK::Dvars::GetBool(*T6SDK::Dvars::DvarList::cg_drawGun) ? 1 : 0) + ";\n" +
			std::string("r_bloomTweaks ") + std::to_string(T6SDK::Dvars::GetBool(*T6SDK::Dvars::DvarList::r_bloomTweaks) ? 1 : 0) + ";\n" +
			"//GENERATED BY T6MVM. REQUIRES T6MVM TO BE LOADED.\n" +
			std::string("mvm_greenScreen ") + std::to_string(T6SDK::Dvars::GetBool(CustomDvars::dvar_greenScreen) ? 1 : 0) + ";\n" +
			std::string("mvm_greenScreenPlayers ") + std::to_string(T6SDK::Dvars::GetInt(CustomDvars::dvar_greenScreenPlayers)) + ";\n" +
			std::string("mvm_greenScreenPlayersThreshold ") + std::to_string(T6SDK::Dvars::GetFloat(CustomDvars::dvar_greenScreenPlayersThreshold)) + ";\n" +
			std::string("mvm_greenScreenColor ") + std::to_string(CustomDvars::dvar_greenScreenColor->current.vector[0]) + " " + std::to_string(CustomDvars::dvar_greenScreenColor->current.vector[1]) + " " + std::to_string(CustomDvars::dvar_greenScreenColor->current.vector[2]) + ";\n" +
			std::string("mvm_zdepth ") + std::to_string(T6SDK::Dvars::GetBool(CustomDvars::dvar_zdepth) ? 1 : 0) + ";\n" +
			std::string("mvm_zdepthDistance ") + std::to_string(T6SDK::Dvars::GetFloat(CustomDvars::dvar_zdepthDistance)) + ";\n";
			
		return cfg;
	}
	static void Draw()
	{
		if(!*UIControls::MiscTabButton.isChecked)
			return;
		//GREEN SCREEN
		vec2_t coords = T6SDK::Drawing::GetGridCellCoords(8, 5);
		T6SDK::Drawing::DrawTextAbsolute("^9GREEN SCREEN", coords.x, coords.y, 1.0f, T6SDK::Drawing::T_WHITECOLOR, T6SDK::AnchorPoint::Center, 0x00);

		UIControls::UI_GreenScreen.Draw();
		char buffer[100];
		sprintf(buffer, "Players green screen: %s", *UIControls::UI_PlayersGreenScreen.SelectedValue == 0 ? "No" : *UIControls::UI_PlayersGreenScreen.SelectedValue == 1 ? "Selected player" : *UIControls::UI_PlayersGreenScreen.SelectedValue == 2 ? "Threshold" : "All");
		UIControls::UI_PlayersGreenScreen.Text = buffer;
		UIControls::UI_PlayersGreenScreen.Draw();//(*UIControls::UI_GreenScreen.isChecked);
		UIControls::UI_PlayersGreenScreenThreshold.Draw();// (*UIControls::UI_PlayersGreenScreen.SelectedValue == 2);
		UIControls::UI_GreenScreenColorR.Draw();
		UIControls::UI_GreenScreenColorG.Draw();
		UIControls::UI_GreenScreenColorB.Draw();

		T6SDK::Drawing::DrawTextAbsolute("^9DEPTH", T6SDK::Drawing::GetGridCellCoords(8, 15).x, T6SDK::Drawing::GetGridCellCoords(8, 15).y, 1.0f, T6SDK::Drawing::T_WHITECOLOR, T6SDK::AnchorPoint::Center, 0x00);
		UIControls::UI_ZDepth.Draw();
		UIControls::UI_ZDepthDistance.Draw();

		T6SDK::Drawing::DrawTextAbsolute("^9TWEAKS", T6SDK::Drawing::GetGridCellCoords(8, 21).x, T6SDK::Drawing::GetGridCellCoords(8, 21).y, 1.0f, T6SDK::Drawing::T_WHITECOLOR, T6SDK::AnchorPoint::Center, 0x00);
		UIControls::UI_RemoveGun.Draw();
		UIControls::UI_RemovePlayers.Draw();
		UIControls::UI_GreenSky.Draw();
		UIControls::UI_BloomTweaks.Draw();
		UIControls::UI_RemoveTheaterBarrier.Draw();
	}

	static void Init()
	{
		UIControls::UI_GreenScreen = T6SDK::Drawing::UI_CheckBoxButton("GREEN SCREEN OFF", "GREEN SCREEN ON", 4, 6, T6SDK::AnchorPoint::TopLeft, &CustomDvars::dvar_greenScreen->current.enabled, (uintptr_t)&Misc::SwitchGreenScreenState);
		UIControls::UI_GreenScreen.ToolTip = "Turn on/off green screen for POV and players.";

		UIControls::UI_PlayersGreenScreen = T6SDK::Drawing::UI_EnumButton("Players green screen: ", 0, 3, &CustomDvars::dvar_greenScreenPlayers->current.integer, 4, 8, T6SDK::AnchorPoint::TopLeft, 0x00);
		UIControls::UI_PlayersGreenScreen.ToolTip = "You can either green screen selected player, all players, or all players that are in certain distance.";

		UIControls::UI_PlayersGreenScreenThreshold = T6SDK::Drawing::UI_Slider("PLAYERS GREEN SCREEN THRESHOLD", &CustomDvars::dvar_greenScreenPlayersThreshold->current.value, 500.0f, 0.0f, 5000.0f, 4, 11, T6SDK::Drawing::ORANGECOLOR, T6SDK::AnchorPoint::TopLeft, 0x00);
		UIControls::UI_PlayersGreenScreenThreshold.ToolTip = "Distance threshold for green screen players.";

		UIControls::UI_GreenScreenColorR = T6SDK::Drawing::UI_Slider("RED", &CustomDvars::dvar_greenScreenColor->current.vector[0], 0.0f, 0.0f, 1.0f, 10, 6, T6SDK::Drawing::REDCOLOR, T6SDK::AnchorPoint::TopLeft, (uintptr_t)&Misc::UpdateClearColors);
		UIControls::UI_GreenScreenColorR.ToolTip = "Clear color R value. Common for green screen and green sky. Also used in streams.";
		UIControls::UI_GreenScreenColorG = T6SDK::Drawing::UI_Slider("GREEN", &CustomDvars::dvar_greenScreenColor->current.vector[1], 1.0f, 0.0f, 1.0f, 10, 9, T6SDK::Drawing::GREENCOLOR, T6SDK::AnchorPoint::TopLeft, (uintptr_t)&Misc::UpdateClearColors);
		UIControls::UI_GreenScreenColorG.ToolTip = "Clear color G value. Common for green screen and green sky. Also used in streams.";
		UIControls::UI_GreenScreenColorB = T6SDK::Drawing::UI_Slider("BLUE", &CustomDvars::dvar_greenScreenColor->current.vector[2], 0.0f, 0.0f, 1.0f, 10, 12, T6SDK::Drawing::BLUECOLOR, T6SDK::AnchorPoint::TopLeft, (uintptr_t)&Misc::UpdateClearColors);
		UIControls::UI_GreenScreenColorB.ToolTip = "Clear color B value. Common for green screen and green sky. Also used in streams.";

		UIControls::UI_ZDepth = T6SDK::Drawing::UI_CheckBoxButton("DEPTH OFF", "DEPTH ON", 4, 16, T6SDK::AnchorPoint::TopLeft, &CustomDvars::dvar_zdepth->current.enabled, (uintptr_t)&Misc::SwitchDepthState);
		UIControls::UI_ZDepth.ToolTip = "Display game buffer depth.";
		UIControls::UI_ZDepthDistance = T6SDK::Drawing::UI_Slider("DEPTH DISTANCE", &CustomDvars::dvar_zdepthDistance->current.value, 1000.0f, 0.0f, 5000.0f, 4, 18, T6SDK::Drawing::ORANGECOLOR, T6SDK::AnchorPoint::TopLeft, (uintptr_t)&Misc::UpdateDepthDistanceValue);
		UIControls::UI_ZDepthDistance.ToolTip = "Tune up your depth distance.";

		UIControls::UI_RemoveGun = T6SDK::Drawing::UI_CheckBoxButtonInversed("REMOVE GUN OFF", "REMOVE GUN ON", 4, 23, T6SDK::AnchorPoint::TopLeft, &(*T6SDK::Dvars::DvarList::cg_drawGun)->current.enabled, 0x00);
		UIControls::UI_RemoveGun.ToolTip = "Remove gun in POV.";
		UIControls::UI_RemovePlayers = T6SDK::Drawing::UI_CheckBoxButton("REMOVE PLAYERS OFF", "REMOVE PLAYERS ON", 7, 23, T6SDK::AnchorPoint::TopLeft, &Streams::NoPlayers.Enabled, 0x00);
		UIControls::UI_RemovePlayers.ToolTip = "Remove ONLY players. Any other dynamic object remains.";
		UIControls::UI_GreenSky = T6SDK::Drawing::UI_CheckBoxButton("GREEN SKY OFF", "GREEN SKY ON", 10, 23, T6SDK::AnchorPoint::TopLeft, &Streams::GreenSky.Enabled, (uintptr_t)&Misc::GreenSkySwitchStates);
		UIControls::UI_GreenSky.ToolTip = "Remove sky and make it green.";
		UIControls::UI_BloomTweaks = T6SDK::Drawing::UI_CheckBoxButton("BLOOM TWEAKS OFF", "BLOOM TWEAKS ON", 4, 26, T6SDK::AnchorPoint::TopLeft, &(*T6SDK::Dvars::DvarList::r_bloomTweaks)->current.enabled, 0x00);
		UIControls::UI_BloomTweaks.ToolTip = "Remove that bloominess aroung bright objects.";
		UIControls::UI_RemoveTheaterBarrier = T6SDK::Drawing::UI_CheckBoxButtonInversed("REMOVE THEATER BARRIER OFF", "REMOVE THEATER BARRIER ON", 7, 26, T6SDK::AnchorPoint::TopLeft, (bool*)LocalAddresses::RemoveTheaterBarrierAddress, 0x00);
		UIControls::UI_RemoveTheaterBarrier.ToolTip = "Fly around the map without borders.";
		
	}
}